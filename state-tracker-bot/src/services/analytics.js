// –§–∞–π–ª services/analytics.js
import natural from 'natural';
import { NlpManager } from 'node-nlp';

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è NLP-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
const manager = new NlpManager({ languages: ['uk'] });

// –î–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤—ñ —Ñ—Ä–∞–∑–∏ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
function initNLP() {
  // –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ —Å—Ç–∞–Ω–∏
  manager.addDocument('uk', '—è —â–∞—Å–ª–∏–≤–∏–π', 'positive');
  manager.addDocument('uk', '–º–µ–Ω—ñ –¥–æ–±—Ä–µ', 'positive');
  manager.addDocument('uk', '—è –≤ —Ä–µ—Å—É—Ä—Å—ñ', 'positive');
  manager.addDocument('uk', '–≤—ñ–¥—á—É–≤–∞—é –µ–Ω–µ—Ä–≥—ñ—é', 'positive');
  
  // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ñ —Å—Ç–∞–Ω–∏
  manager.addDocument('uk', '–Ω–æ—Ä–º–∞–ª—å–Ω–æ', 'neutral');
  manager.addDocument('uk', '—è–∫ –∑–∞–≤–∂–¥–∏', 'neutral');
  manager.addDocument('uk', '–∑–≤–∏—á–∞–π–Ω–æ', 'neutral');
  
  // –ù–µ–≥–∞—Ç–∏–≤–Ω—ñ —Å—Ç–∞–Ω–∏
  manager.addDocument('uk', '—Ç—Ä–∏–≤–æ–∂–Ω–æ', 'negative');
  manager.addDocument('uk', '—Å—Ç—Ä–∞—à–Ω–æ', 'negative');
  manager.addDocument('uk', '–≤–∏—Å–Ω–∞–∂–µ–Ω–∏–π', 'negative');
  manager.addDocument('uk', '–≤—Ç–æ–º–∏–≤—Å—è', 'negative');
  
  // –¢—Ä–µ–Ω—É—î–º–æ –º–æ–¥–µ–ª—å
  return manager.train();
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É
initNLP();

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
async function generateDailyReport(records, user) {
  // –ê–Ω–∞–ª—ñ–∑ –Ω–∞–π—á–∞—Å—Ç—ñ—à–æ–≥–æ —Å—Ç–∞–Ω—É
  const states = records.map(record => record.state);
  const stateCount = {};
  
  states.forEach(state => {
    stateCount[state] = (stateCount[state] || 0) + 1;
  });
  
  const mostCommonState = Object.keys(stateCount).reduce((a, b) => stateCount[a] > stateCount[b] ? a : b);
  
  // –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—Ç–∏—Ö –µ–º–æ—Ü—ñ–π
  const emotions = records.map(record => record.emotion);
  const emotionCount = {};
  
  emotions.forEach(emotion => {
    emotionCount[emotion] = (emotionCount[emotion] || 0) + 1;
  });
  
  const sortedEmotions = Object.keys(emotionCount)
    .sort((a, b) => emotionCount[b] - emotionCount[a])
    .slice(0, 3);
  
  // –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–∏–≥–µ—Ä—ñ–≤ (–¥—ñ—ó, —â–æ –ø–µ—Ä–µ–¥—É–≤–∞–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º —Å—Ç–∞–Ω–∞–º)
  const triggers = [];
  
  for (let i = 1; i < records.length; i++) {
    if (['tense', 'exhausted', 'anxious', 'panic'].includes(records[i].state)) {
      triggers.push(records[i-1].action);
    }
  }
  
  const triggerCount = {};
  triggers.forEach(trigger => {
    triggerCount[trigger] = (triggerCount[trigger] || 0) + 1;
  });
  
  const commonTriggers = Object.keys(triggerCount)
    .sort((a, b) => triggerCount[b] - triggerCount[a])
    .slice(0, 2);
  
  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
  let recommendation = '';
  
  if (commonTriggers.includes('social_media')) {
    recommendation = '–°–ø—Ä–æ–±—É–π –æ–±–º–µ–∂–∏—Ç–∏ —á–∞—Å —É —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö, –æ—Å–æ–±–ª–∏–≤–æ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.';
  } else if (commonTriggers.includes('work')) {
    recommendation = '–ú–æ–∂–ª–∏–≤–æ, —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –ø–µ—Ä–µ—Ä–≤ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ —Ç–∞ –∫—Ä–∞—â–∏–π –±–∞–ª–∞–Ω—Å –º—ñ–∂ —Ä–æ–±–æ—Ç–æ—é —ñ –≤—ñ–¥–ø–æ—á–∏–Ω–∫–æ–º.';
  } else if (['tense', 'anxious', 'panic'].includes(mostCommonState)) {
    recommendation = '–°–ø—Ä–æ–±—É–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –≥–ª–∏–±–æ–∫–æ–≥–æ –¥–∏—Ö–∞–Ω–Ω—è –∞–±–æ –º–µ–¥–∏—Ç–∞—Ü—ñ—ó, —â–æ–± –∑–º–µ–Ω—à–∏—Ç–∏ —Ç—Ä–∏–≤–æ–≥—É.';
  } else if (mostCommonState === 'exhausted') {
    recommendation = '–ü–æ–¥–±–∞–π –ø—Ä–æ —è–∫—ñ—Å–Ω–∏–π —Å–æ–Ω —Ç–∞ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫.';
  } else {
    recommendation = '–ü—Ä–æ–¥–æ–≤–∂—É–π –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–≤—ñ–π —Å—Ç–∞–Ω, —â–æ–± –ø–æ–º—ñ—Ç–∏—Ç–∏ –∑–∞–∫–æ–Ω–æ–º—ñ—Ä–Ω–æ—Å—Ç—ñ.';
  }
  
  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É
  return `üìä *–¢–≤—ñ–π –¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç*\n\n` +
    `–°—å–æ–≥–æ–¥–Ω—ñ —Ç–∏ –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –≤—ñ–¥—á—É–≤–∞–≤(–ª–∞) —Å–µ–±–µ *${translateState(mostCommonState)}*.\n\n` +
    `–û—Å–Ω–æ–≤–Ω—ñ –µ–º–æ—Ü—ñ—ó: ${sortedEmotions.map(translateEmotion).join(', ')}.\n\n` +
    `üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: ${recommendation}\n\n` +
    `–ü—Ä–æ–¥–æ–≤–∂—É–π –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–≤—ñ–π —Å—Ç–∞–Ω —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤!`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –∑–≤—ñ—Ç—É
async function generateWeeklyReport(records, user) {
  // –†–æ–∑–±–∏–≤–∞—î–º–æ –∑–∞–ø–∏—Å–∏ –ø–æ –¥–Ω—è—Ö
  const dayMap = {};
  
  records.forEach(record => {
    const day = record.timestamp.toISOString().split('T')[0];
    if (!dayMap[day]) {
      dayMap[day] = [];
    }
    dayMap[day].push(record);
  });
  
  // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç—Ä–µ–Ω–¥–∏
  const statesByDay = {};
  const days = Object.keys(dayMap).sort();
  
  days.forEach(day => {
    const dayRecords = dayMap[day];
    const states = dayRecords.map(record => record.state);
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à–∏–π —Å—Ç–∞–Ω –∑–∞ –¥–µ–Ω—å
    const stateCount = {};
    states.forEach(state => {
      stateCount[state] = (stateCount[state] || 0) + 1;
    });
    
    const mostCommonState = Object.keys(stateCount).reduce((a, b) => stateCount[a] > stateCount[b] ? a : b);
    statesByDay[day] = mostCommonState;
  });
  
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–¥
  let trend = '—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π';
  const firstState = statesByDay[days[0]];
  const lastState = statesByDay[days[days.length - 1]];
  
  const positiveStates = ['resourceful', 'calm'];
  const negativeStates = ['tense', 'exhausted', 'anxious', 'panic'];
  
  // –§–∞–π–ª services/analytics.js (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)
  if (positiveStates.includes(firstState) && negativeStates.includes(lastState)) {
    trend = '–ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è';
  } else if (negativeStates.includes(firstState) && positiveStates.includes(lastState)) {
    trend = '–ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è';
  }
  
  // –ü–æ—à—É–∫ –ø–∞—Ç–µ—Ä–Ω—ñ–≤
  let patterns = [];
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–≤'—è–∑–æ–∫ –º—ñ–∂ –¥—ñ—è–º–∏ —Ç–∞ –µ–º–æ—Ü—ñ—è–º–∏
  const actionEmotionMap = {};
  records.forEach(record => {
    if (!actionEmotionMap[record.action]) {
      actionEmotionMap[record.action] = {};
    }
    
    const emotionCount = actionEmotionMap[record.action];
    emotionCount[record.emotion] = (emotionCount[record.emotion] || 0) + 1;
  });
  
  Object.keys(actionEmotionMap).forEach(action => {
    const emotions = actionEmotionMap[action];
    const dominantEmotion = Object.keys(emotions).reduce((a, b) => emotions[a] > emotions[b] ? a : b);
    
    // –Ø–∫—â–æ —î —Å–∏–ª—å–Ω–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—è
    if (emotions[dominantEmotion] >= 3) {
      patterns.push({
        action,
        emotion: dominantEmotion,
        count: emotions[dominantEmotion]
      });
    }
  });
  
  // –°–æ—Ä—Ç—É—î–º–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∏ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –≤–∏–ø–∞–¥–∫—ñ–≤
  patterns.sort((a, b) => b.count - a.count);
  
  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç—Ä–µ–Ω–¥—É —ñ –ø–∞—Ç–µ—Ä–Ω—ñ–≤
  let recommendation = '';
  
  if (trend === '–ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è') {
    recommendation = '–¢–≤—ñ–π –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω –ø–æ–≥—ñ—Ä—à–∏–≤—Å—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å. –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –ø—Ä–∏–¥—ñ–ª–∏—Ç–∏ –±—ñ–ª—å—à–µ —É–≤–∞–≥–∏ —Å–∞–º–æ–¥–æ–≥–ª—è–¥—É —Ç–∞ —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó.';
  } else if (trend === '–ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è') {
    recommendation = '–¢–≤—ñ–π –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω –ø–æ–∫—Ä–∞—â–∏–≤—Å—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å! –ü—Ä–æ–¥–æ–≤–∂—É–π —Ç–µ, —â–æ –ø—Ä–∞—Ü—é—î –¥–ª—è —Ç–µ–±–µ.';
  } else if (patterns.length > 0) {
    const topPattern = patterns[0];
    if (['joy', 'calm', 'gratitude'].includes(topPattern.emotion)) {
      recommendation = `–ö–æ–ª–∏ —Ç–∏ ${translateAction(topPattern.action)}, —Ç–∏ –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –≤—ñ–¥—á—É–≤–∞—î—à ${translateEmotion(topPattern.emotion)}. –°–ø—Ä–æ–±—É–π –≤–∫–ª—é—á–∞—Ç–∏ —Ü—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —á–∞—Å—Ç—ñ—à–µ!`;
    } else if (['anger', 'fear', 'sadness'].includes(topPattern.emotion)) {
      recommendation = `–ö–æ–ª–∏ —Ç–∏ ${translateAction(topPattern.action)}, —Ç–∏ –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –≤—ñ–¥—á—É–≤–∞—î—à ${translateEmotion(topPattern.emotion)}. –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –æ–±–º–µ–∂–∏—Ç–∏ –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏ —Ü—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.`;
    }
  } else {
    recommendation = '–ü—Ä–æ–¥–æ–≤–∂—É–π –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–≤—ñ–π —Å—Ç–∞–Ω, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –±—ñ–ª—å—à–µ –∑–∞–∫–æ–Ω–æ–º—ñ—Ä–Ω–æ—Å—Ç–µ–π.';
  }
  
  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É
  let report = `üìà *–¢–≤—ñ–π —Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç*\n\n`;
  
  // –î–æ–¥–∞—î–º–æ –æ–≥–ª—è–¥ –ø–æ –¥–Ω—è—Ö
  report += `*–û–≥–ª—è–¥ –ø–æ –¥–Ω—è—Ö:*\n`;
  days.forEach(day => {
    const date = new Date(day);
    const dayName = date.toLocaleDateString('uk-UA', { weekday: 'long' });
    report += `- ${dayName}: ${translateState(statesByDay[day])}\n`;
  });
  
  report += `\n*–ó–∞–≥–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–¥:* ${trend}\n\n`;
  
  // –î–æ–¥–∞—î–º–æ –∑–Ω–∞–π–¥–µ–Ω—ñ –∑–∞–∫–æ–Ω–æ–º—ñ—Ä–Ω–æ—Å—Ç—ñ
  if (patterns.length > 0) {
    report += `*–í–∏—è–≤–ª–µ–Ω—ñ –∑–∞–∫–æ–Ω–æ–º—ñ—Ä–Ω–æ—Å—Ç—ñ:*\n`;
    patterns.slice(0, 2).forEach(pattern => {
      report += `- –ö–æ–ª–∏ —Ç–∏ ${translateAction(pattern.action)}, —á–∞—Å—Ç–æ –≤—ñ–¥—á—É–≤–∞—î—à ${translateEmotion(pattern.emotion)}\n`;
    });
    report += `\n`;
  }
  
  report += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:* ${recommendation}\n\n`;
  report += `–ü—Ä–æ–¥–æ–≤–∂—É–π —Å—Ç–µ–∂–∏—Ç–∏ –∑–∞ —Å–≤–æ—ó–º –µ–º–æ—Ü—ñ–π–Ω–∏–º —Å—Ç–∞–Ω–æ–º! –†–µ–≥—É–ª—è—Ä–Ω—ñ –∑–∞–ø–∏—Å–∏ –¥–æ–ø–æ–º–æ–∂—É—Ç—å —Ç–æ–±—ñ –∫—Ä–∞—â–µ —Ä–æ–∑—É–º—ñ—Ç–∏ —Å–µ–±–µ.`;
  
  return report;
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
function translateState(state) {
  const states = {
    'resourceful': '—Ä–µ—Å—É—Ä—Å–Ω–∏–π',
    'neutral': '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π',
    'tense': '–Ω–∞–ø—Ä—É–∂–µ–Ω–∏–π',
    'exhausted': '–≤–∏—Å–Ω–∞–∂–µ–Ω–∏–π',
    'anxious': '—Ç—Ä–∏–≤–æ–∂–Ω–∏–π',
    'panic': '–ø–∞–Ω—ñ—á–Ω–∏–π'
  };
  
  return states[state] || state;
}

function translateEmotion(emotion) {
  const emotions = {
    'joy': '—Ä–∞–¥—ñ—Å—Ç—å',
    'anger': '–≥–Ω—ñ–≤',
    'calm': '—Å–ø–æ–∫—ñ–π',
    'sadness': '—Å—É–º',
    'fear': '—Å—Ç—Ä–∞—Ö',
    'gratitude': '–≤–¥—è—á–Ω—ñ—Å—Ç—å',
    'love': '–ª—é–±–æ–≤',
    'guilt': '–ø—Ä–æ–≤–∏–Ω–∞'
  };
  
  return emotions[emotion] || emotion;
}

function translateAction(action) {
  const actions = {
    'work': '–ø—Ä–∞—Ü—é—î—à',
    'eating': '—ó—Å–∏',
    'social_media': '–∫–æ—Ä–∏—Å—Ç—É—î—à—Å—è —Å–æ—Ü–º–µ—Ä–µ–∂–∞–º–∏',
    'communication': '—Å–ø—ñ–ª–∫—É—î—à—Å—è',
    'exercise': '–∑–∞–π–º–∞—î—à—Å—è —Å–ø–æ—Ä—Ç–æ–º',
    'rest': '–≤—ñ–¥–ø–æ—á–∏–≤–∞—î—à'
  };
  
  return actions[action] || action;
}

// –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
async function analyzeSentiment(text) {
  try {
    // –ê–Ω–∞–ª—ñ–∑ –Ω–∞—Å—Ç—Ä–æ—é —á–µ—Ä–µ–∑ NLP
    const result = await manager.process('uk', text);
    return result.intent;
  } catch (err) {
    console.error('Error analyzing sentiment:', err);
    return 'neutral'; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
  }
}

export {
  generateDailyReport,
  generateWeeklyReport,
  analyzeSentiment
};