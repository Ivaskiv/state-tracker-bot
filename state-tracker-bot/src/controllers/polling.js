// –§–∞–π–ª controllers/polling.js
import User from '../models/user.js';
import Record from '../models/record.js';

// –ó–∞–ø—É—Å–∫ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
async function startPoll(ctx) {
  const telegramId = ctx.from.id;
  
  try {
    const user = await User.findOne({ telegramId });
    
    if (!user) {
      return ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.');
    }
    
    await sendStateQuestion(ctx, user.name);
  } catch (err) {
    console.error('Error starting poll:', err);
    await ctx.reply('–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –ø—ñ–∑–Ω—ñ—à–µ.');
  }
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞–Ω
async function sendStateQuestion(ctx, userName) {
  await ctx.reply(
    `${userName}, —è–∫ —Ç–∏ –∑–∞—Ä–∞–∑ —Å–µ–±–µ –ø–æ—á—É–≤–∞—î—à –∑–∞–≥–∞–ª–æ–º?`,
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–†–µ—Å—É—Ä—Å–Ω–∏–π', callback_data: 'state_resourceful' },
            { text: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π', callback_data: 'state_neutral' }
          ],
          [
            { text: '–ù–∞–ø—Ä—É–∂–µ–Ω–∏–π', callback_data: 'state_tense' },
            { text: '–í–∏—Å–Ω–∞–∂–µ–Ω–∏–π', callback_data: 'state_exhausted' }
          ],
          [
            { text: '–¢—Ä–∏–≤–æ–∂–Ω–∏–π', callback_data: 'state_anxious' },
            { text: '–ü–∞–Ω—ñ—á–Ω–∏–π', callback_data: 'state_panic' }
          ],
          [{ text: '‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç', callback_data: 'state_custom' }]
        ]
      }
    }
  );
}

// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ —Å—Ç–∞–Ω
async function handleStateResponse(ctx) {
  const state = ctx.match[1];
  
  if (state === 'custom') {
    await ctx.reply('–û–ø–∏—à–∏ —Å–≤—ñ–π —Å—Ç–∞–Ω —Å–≤–æ—ó–º–∏ —Å–ª–æ–≤–∞–º–∏:');
    // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    ctx.scene.register('customState', customStateScene);
    return ctx.scene.enter('customState');
  }
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –≤ —Å–µ—Å—ñ—ó
  ctx.session.currentPoll = ctx.session.currentPoll || {};
  ctx.session.currentPoll.state = state;
  
  // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (–µ–º–æ—Ü—ñ—ó)
  await sendEmotionQuestion(ctx);
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –µ–º–æ—Ü—ñ—é
async function sendEmotionQuestion(ctx) {
  await ctx.reply(
    '–Ø–∫—É –µ–º–æ—Ü—ñ—é —Ç–∏ –∑–∞—Ä–∞–∑ –≤—ñ–¥—á—É–≤–∞—î—à –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à–µ?',
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–†–∞–¥—ñ—Å—Ç—å', callback_data: 'emotion_joy' },
            { text: '–ì–Ω—ñ–≤', callback_data: 'emotion_anger' }
          ],
          [
            { text: '–°–ø–æ–∫—ñ–π', callback_data: 'emotion_calm' },
            { text: '–°—É–º', callback_data: 'emotion_sadness' }
          ],
          [
            { text: '–°—Ç—Ä–∞—Ö', callback_data: 'emotion_fear' },
            { text: '–í–¥—è—á–Ω—ñ—Å—Ç—å', callback_data: 'emotion_gratitude' }
          ],
          [{ text: '‚úçÔ∏è –Ü–Ω—à–µ', callback_data: 'emotion_custom' }]
        ]
      }
    }
  );
}

// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ –µ–º–æ—Ü—ñ—é
async function handleEmotionResponse(ctx) {
  const emotion = ctx.match[1];
  
  if (emotion === 'custom') {
    await ctx.reply('–û–ø–∏—à–∏ —Å–≤–æ—é –µ–º–æ—Ü—ñ—é —Å–≤–æ—ó–º–∏ —Å–ª–æ–≤–∞–º–∏:');
    ctx.scene.register('customEmotion', customEmotionScene);
    return ctx.scene.enter('customEmotion');
  }
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–º–æ—Ü—ñ—é –≤ —Å–µ—Å—ñ—ó
  ctx.session.currentPoll = ctx.session.currentPoll || {};
  ctx.session.currentPoll.emotion = emotion;
  
  // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (–ø–æ—á—É—Ç—Ç—è)
  await sendFeelingQuestion(ctx);
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ø–æ—á—É—Ç—Ç—è
async function sendFeelingQuestion(ctx) {
  await ctx.reply(
    '–ê —è–∫–µ –≥–ª–∏–±—à–µ –ø–æ—á—É—Ç—Ç—è –ø–µ—Ä–µ–≤–∞–∂–∞—î –≤ —Ç–æ–±—ñ —Å—å–æ–≥–æ–¥–Ω—ñ/–∑–∞—Ä–∞–∑?',
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–õ—é–±–æ–≤', callback_data: 'feeling_love' },
            { text: '–ü—Ä–æ–≤–∏–Ω–∞', callback_data: 'feeling_guilt' }
          ],
          [
            { text: '–°–∞–º–æ—Ç–Ω—ñ—Å—Ç—å', callback_data: 'feeling_loneliness' },
            { text: '–ü—Ä–∏–π–Ω—è—Ç—Ç—è', callback_data: 'feeling_acceptance' }
          ],
          [
            { text: '–°–æ—Ä–æ–º', callback_data: 'feeling_shame' },
            { text: '–ù–∞–¥—ñ—è', callback_data: 'feeling_hope' }
          ],
          [{ text: '‚úçÔ∏è –ù–∞–ø–∏—à–∏ –≤–∞—Ä—ñ–∞–Ω—Ç', callback_data: 'feeling_custom' }]
        ]
      }
    }
  );
}

// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ –ø–æ—á—É—Ç—Ç—è
async function handleFeelingResponse(ctx) {
  const feeling = ctx.match[1];
  
  if (feeling === 'custom') {
    await ctx.reply('–û–ø–∏—à–∏ —Å–≤–æ—î –ø–æ—á—É—Ç—Ç—è —Å–≤–æ—ó–º–∏ —Å–ª–æ–≤–∞–º–∏:');
    ctx.scene.register('customFeeling', customFeelingScene);
    return ctx.scene.enter('customFeeling');
  }
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á—É—Ç—Ç—è –≤ —Å–µ—Å—ñ—ó
  ctx.session.currentPoll = ctx.session.currentPoll || {};
  ctx.session.currentPoll.feeling = feeling;
  
  // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (–¥—ñ—è)
  await sendActionQuestion(ctx);
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –¥—ñ—é
async function sendActionQuestion(ctx) {
  await ctx.reply(
    '–©–æ —Ç–∏ —Ä–æ–±–∏–≤(–ª–∞) –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–≤(–ª–∞)?',
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–ü—Ä–∞—Ü—é–≤–∞–≤(–ª–∞)', callback_data: 'action_work' },
            { text: '–á–≤(–ª–∞)', callback_data: 'action_eating' }
          ],
          [
            { text: '–ë—É–≤(–ª–∞) –≤ —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö', callback_data: 'action_social_media' },
            { text: '–°–ø—ñ–ª–∫—É–≤–∞–≤—Å—è(–ª–∞—Å—å)', callback_data: 'action_communication' }
          ],
          [
            { text: '–†—É—Ö–∞–≤—Å—è(–ª–∞—Å—å) / —Å–ø–æ—Ä—Ç', callback_data: 'action_exercise' },
            { text: '–í—ñ–¥–ø–æ—á–∏–≤–∞–≤(–ª–∞)', callback_data: 'action_rest' }
          ],
          [{ text: '‚úçÔ∏è –©–æ—Å—å —ñ–Ω—à–µ', callback_data: 'action_custom' }]
        ]
      }
    }
  );
}

// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ –¥—ñ—é
async function handleActionResponse(ctx) {
  const action = ctx.match[1];
  
  if (action === 'custom') {
    await ctx.reply('–û–ø–∏—à–∏ —Å–≤–æ—é –¥—ñ—é —Å–≤–æ—ó–º–∏ —Å–ª–æ–≤–∞–º–∏:');
    ctx.scene.register('customAction', customActionScene);
    return ctx.scene.enter('customAction');
  }
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥—ñ—é –≤ —Å–µ—Å—ñ—ó
  ctx.session.currentPoll = ctx.session.currentPoll || {};
  ctx.session.currentPoll.action = action;
  
  // –ó–∞–≤–µ—Ä—à—É—î–º–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
  await saveRecord(ctx);
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
async function saveRecord(ctx) {
  const telegramId = ctx.from.id;
  
  try {
    const user = await User.findOne({ telegramId });
    
    if (!user) {
      return ctx.reply('–ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    }
    
    const record = new Record({
      userId: user._id,
      telegramId,
      state: ctx.session.currentPoll.state,
      emotion: ctx.session.currentPoll.emotion,
      feeling: ctx.session.currentPoll.feeling,
      action: ctx.session.currentPoll.action,
      custom: ctx.session.currentPoll.custom || {}
    });
    
    await record.save();
    
    // –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
    delete ctx.session.currentPoll;
    
    await ctx.reply(
      '–î—è–∫—É—é! –¢–∏ –∑—Ä–æ–±–∏–≤(–ª–∞) —â–µ –æ–¥–∏–Ω –∫—Ä–æ–∫ –¥–æ —Å–≤—ñ–¥–æ–º–æ–≥–æ —Å—Ç–∞–Ω—É üßò‚Äç‚ôÄÔ∏è\n' +
      '–¢–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ü–æ–±–∞—á–∏–º–æ—Å—å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É!'
    );
  } catch (err) {
    console.error('Error saving record:', err);
    await ctx.reply('–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.');
  }
}

export {
  startPoll,
  handleStateResponse,
  handleEmotionResponse,
  handleFeelingResponse,
  handleActionResponse
};
