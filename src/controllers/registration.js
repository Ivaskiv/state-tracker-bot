import { Scenes, Markup } from 'telegraf';
import User from '../models/user.js';
import { configData } from '../config/configData.js';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —á–∞—Å—Ç–æ—Ç–∏
const getFrequencyText = (frequency) => {
  return configData.frequencyOptions[frequency] || `${frequency} —Ö–≤–∏–ª–∏–Ω`;
};

// –°—Ü–µ–Ω–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const registerScene = new Scenes.BaseScene('register');

registerScene.enter(async (ctx) => {
  const userId = ctx.from.id;

  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  let user = await User.findOne({ telegramId: userId });
  if (!user) {
    user = new User({
      telegramId: userId,
      firstName: ctx.from.first_name,
      lastName: ctx.from.last_name,
      username: ctx.from.username,
    });
    await user.save();
  }

  // –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–±–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  if (user.telegramId === userId) {
    await ctx.reply(`–í—ñ—Ç–∞—î–º–æ, ${user.firstName}! –í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n–ß–∞—Å—Ç–æ—Ç–∞ –æ–ø–∏—Ç—É–≤–∞–Ω—å: ${getFrequencyText(user.pollFrequency)}\n–ß–∞—Å: ${user.pollStartTime}:00 - ${user.pollEndTime}:00 üïí`);
    await ctx.reply('–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è?', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–¢–∞–∫, –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è üîß', callback_data: 'change_settings' }],
          [{ text: '–ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏ –±–µ–∑ –∑–º—ñ–Ω ‚úÖ', callback_data: 'keep_settings' }],
        ],
      },
    });
  }
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
registerScene.action('change_settings', (ctx) => {
  ctx.answerCbQuery();
  ctx.scene.enter('frequency');
});

// –û–±—Ä–æ–±–∫–∞ –∑–∞–ª–∏—à–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–µ–∑ –∑–º—ñ–Ω
registerScene.action('keep_settings', (ctx) => {
  ctx.answerCbQuery();
  ctx.reply('–ß—É–¥–æ–≤–æ! –í–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω.');
  ctx.scene.leave();
});

// –°—Ü–µ–Ω–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —á–∞—Å—Ç–æ—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω—å
const frequencyScene = new Scenes.BaseScene('frequency');
frequencyScene.enter((ctx) => {
  ctx.reply('–û–±–µ—Ä—ñ—Ç—å —á–∞—Å—Ç–æ—Ç—É –æ–ø–∏—Ç—É–≤–∞–Ω—å:');
});
frequencyScene.on('text', (ctx) => ctx.reply('–ß–∞—Å—Ç–æ—Ç–∞: ' + ctx.message.text));

// –°—Ü–µ–Ω–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —á–∞—Å—É –æ–ø–∏—Ç—É–≤–∞–Ω—å
const timeScene = new Scenes.BaseScene('time');
timeScene.enter((ctx) => {
  ctx.reply('–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –ø–æ—á–∞—Ç–∫—É —Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 09:00 18:00):');
});
timeScene.on('text', (ctx) => ctx.reply('–ß–∞—Å: ' + ctx.message.text));

export { registerScene, frequencyScene, timeScene };
