import { Scenes } from 'telegraf';
import User from '../models/user.js';
import config from '../config.js';

// –°–ø—ñ–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
const getFrequencyText = (frequency) => {
  switch (frequency) {
    case '15': return '15 —Ö–≤–∏–ª–∏–Ω';
    case '30': return '30 —Ö–≤–∏–ª–∏–Ω';
    case '60': return '1 –≥–æ–¥–∏–Ω–∞';
    case '120': return '2 –≥–æ–¥–∏–Ω–∏';
    default: return `${frequency} —Ö–≤–∏–ª–∏–Ω`;
  }
};

// –û–±—Ä–æ–±–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const registerUser = async (ctx, userId) => {
  const existingUser = await User.findOne({ telegramId: userId });
  if (existingUser) {
    return existingUser;
  }

  const newUser = new User({
    telegramId: userId,
    firstName: ctx.from.first_name,
    lastName: ctx.from.last_name,
    username: ctx.from.username,
  });

  await newUser.save();
  return newUser;
};

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
const handleError = async (ctx, error) => {
  console.error(error);
  await ctx.reply('–£–ø—Å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –ø—ñ–∑–Ω—ñ—à–µ.');
  ctx.scene.leave();
};

// –°—Ü–µ–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const registerScene = new Scenes.BaseScene('register');

registerScene.enter(async (ctx) => {
  const userId = ctx.from.id;

  try {
    const user = await registerUser(ctx, userId);
    
    if (user) {
      if (user.telegramId === userId) {
        // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î, –≤–∏–≤–æ–¥–∏–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        await ctx.reply(
          `–í—ñ—Ç–∞—é –∑–Ω–æ–≤—É! –í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n` +
          `–ß–∞—Å—Ç–æ—Ç–∞ –æ–ø–∏—Ç—É–≤–∞–Ω—å: ${getFrequencyText(user.pollFrequency)}\n` +
          `–ß–∞—Å –æ–ø–∏—Ç—É–≤–∞–Ω—å: ${user.pollStartTime}:00 - ${user.pollEndTime}:00 üïí`
        );
        // –ó–∞–ø–∏—Ç –Ω–∞ –∑–º—ñ–Ω—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        await ctx.reply('–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è?', {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–¢–∞–∫, –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è üîß', callback_data: 'change_settings' }],
              [{ text: '–ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏ –±–µ–∑ –∑–º—ñ–Ω ‚úÖ', callback_data: 'keep_settings' }],
            ],
          },
        });
      } else {
        // –Ø–∫—â–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ
        await ctx.reply(
          `–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –µ–º–æ—Ü—ñ–π–Ω–æ–≥–æ —Å—Ç–∞–Ω—É. –Ø –±—É–¥—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤–∞–º –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π üòä`
        );
        // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É —á–∞—Å—Ç–æ—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω—å
        ctx.scene.enter('frequency');
      }
    }
  } catch (error) {
    handleError(ctx, error);
  }
});

// –û–±—Ä–æ–±–∫–∞ –¥—ñ—ó –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
registerScene.action('change_settings', (ctx) => {
  ctx.answerCbQuery();
  ctx.scene.enter('frequency');
});

// –û–±—Ä–æ–±–∫–∞ –¥—ñ—ó –∑–∞–ª–∏—à–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ –∑–º—ñ–Ω
registerScene.action('keep_settings', async (ctx) => {
  ctx.answerCbQuery();
  await ctx.reply('–ß—É–¥–æ–≤–æ! –í–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω.');
  ctx.scene.leave();
});

// –°—Ü–µ–Ω–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —á–∞—Å—Ç–æ—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω—å
const frequencyScene = new Scenes.BaseScene('frequency');

frequencyScene.enter(async (ctx) => {
  await ctx.reply('–Ø–∫ —á–∞—Å—Ç–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è?', {
    reply_markup: {
      inline_keyboard: [
        [{ text: '15 —Ö–≤–∏–ª–∏–Ω ‚è±Ô∏è', callback_data: '15' }],
        [{ text: '30 —Ö–≤–∏–ª–∏–Ω ‚è±Ô∏è', callback_data: '30' }],
        [{ text: '1 –≥–æ–¥–∏–Ω–∞ üïí', callback_data: '60' }],
        [{ text: '2 –≥–æ–¥–∏–Ω–∏ ‚è≥', callback_data: '120' }],
        [{ text: '–í–∫–∞–∑–∞—Ç–∏ –≤–ª–∞—Å–Ω—É —á–∞—Å—Ç–æ—Ç—É üìù', callback_data: 'custom' }],
      ],
    },
  });
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å—Ç–æ—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω—å
frequencyScene.action(['15', '30', '60', '120'], async (ctx) => {
  const frequency = ctx.callbackQuery.data;
  ctx.answerCbQuery();
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—É —á–∞—Å—Ç–æ—Ç—É –≤ —Å–µ—Å—ñ—ó
  ctx.session.frequency = frequency;

  // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É
  await ctx.reply(`–í–∏ –æ–±—Ä–∞–ª–∏ —á–∞—Å—Ç–æ—Ç—É –æ–ø–∏—Ç—É–≤–∞–Ω—å: ${getFrequencyText(frequency)}. –ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –≤–∏–±—ñ—Ä?`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ', callback_data: 'confirm' }],
        [{ text: '–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå', callback_data: 'cancel' }],
      ],
    },
  });
});

// –û–±—Ä–æ–±–∫–∞ –≤–ª–∞—Å–Ω–æ—ó —á–∞—Å—Ç–æ—Ç–∏
frequencyScene.action('custom', (ctx) => {
  ctx.answerCbQuery();
  ctx.reply('–í–≤–µ–¥—ñ—Ç—å –≤–ª–∞—Å–Ω—É —á–∞—Å—Ç–æ—Ç—É –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö (–≤—ñ–¥ 5 –¥–æ 240)‚è≥:');
  ctx.scene.enter('custom_frequency');
});

// –°—Ü–µ–Ω–∞ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ—ó —á–∞—Å—Ç–æ—Ç–∏
const customFrequencyScene = new Scenes.BaseScene('custom_frequency');

customFrequencyScene.on('text', async (ctx) => {
  const userInput = parseInt(ctx.message.text);

  if (userInput >= 5 && userInput <= 240) {
    ctx.session.frequency = userInput;
    await ctx.reply(`–í–∞—à–∞ —á–∞—Å—Ç–æ—Ç–∞ –æ–ø–∏—Ç—É–≤–∞–Ω—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${userInput} —Ö–≤–∏–ª–∏–Ω. –ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –≤–∏–±—ñ—Ä?`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: 'confirm' }],
          [{ text: '–°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel' }],
        ],
      },
    });
    ctx.scene.leave();
  } else {
    await ctx.reply('–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–≤–µ–¥–µ–Ω–∏–π —á–∞—Å. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 5 –¥–æ 240 —Ö–≤–∏–ª–∏–Ω.');
  }
});

// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É —á–∞—Å—Ç–æ—Ç–∏
frequencyScene.action('confirm', async (ctx) => {
  const frequency = ctx.session.frequency;
  ctx.answerCbQuery();
  
  await ctx.reply(`–ß–∞—Å—Ç–æ—Ç–∞ –æ–ø–∏—Ç—É–≤–∞–Ω—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞: ${getFrequencyText(frequency)}.`);
  ctx.scene.enter('time');
});

// –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É —á–∞—Å—Ç–æ—Ç–∏
frequencyScene.action('cancel', (ctx) => {
  ctx.answerCbQuery();
  ctx.reply('–í–∏–±—ñ—Ä —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ —á–∞—Å—Ç–æ—Ç—É –∑–Ω–æ–≤—É.');
  ctx.scene.enter('frequency');
});

// –°—Ü–µ–Ω–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —á–∞—Å—É –æ–ø–∏—Ç—É–≤–∞–Ω—å
const timeScene = new Scenes.BaseScene('time');

timeScene.enter(async (ctx) => {
  const message = '–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ —á–∞—Å—É, –∫–æ–ª–∏ –≤–∏ –±–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:';
  
  await ctx.reply(message, {
    reply_markup: {
      inline_keyboard: [
        [{ text: '6:00 - 22:00 üåÖüåô', callback_data: '6_22' }],
        [{ text: '8:00 - 22:00 üïó', callback_data: '8_22' }],
        [{ text: '8:00 - 20:00 üïñ', callback_data: '8_20' }],
        [{ text: '9:00 - 21:00 üïò', callback_data: '9_21' }],
      ],
    },
  });
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å—É –æ–ø–∏—Ç—É–≤–∞–Ω—å
timeScene.action(['6_22', '8_22', '8_20', '9_21'], async (ctx) => {
  const timeRange = ctx.callbackQuery.data;
  ctx.answerCbQuery();
  
  const [startTime, endTime] = timeRange.split('_').map(Number);
  const userId = ctx.from.id;
  const { username, first_name, last_name } = ctx.from;

  try {
    await User.findOneAndUpdate(
      { telegramId: userId },
      {
        telegramId: userId,
        username: username || '',
        firstName: first_name || '',
        lastName: last_name || '',
        pollFrequency: ctx.session.frequency,
        pollStartTime: startTime,
        pollEndTime: endTime,
        created: new Date(),
        lastInteraction: new Date(),
      },
      { upsert: true, new: true }
    );

    await ctx.reply(
      `–ß—É–¥–æ–≤–æ! –í–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ:\n` +
      `–ß–∞—Å—Ç–æ—Ç–∞ –æ–ø–∏—Ç—É–≤–∞–Ω—å: ${getFrequencyText(ctx.session.frequency)}\n` +
      `–ß–∞—Å –æ–ø–∏—Ç—É–≤–∞–Ω—å: ${startTime}:00 - ${endTime}:00 üïí\n\n` +
      `–î–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ä–∞–∑, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /poll üìù\n` +
      `–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help üìö`
    );

    ctx.scene.leave();
  } catch (error) {
    handleError(ctx, error);
  }
});

export { registerScene, frequencyScene, timeScene, customFrequencyScene };
