import { Telegraf } from 'telegraf';
import User from '../models/user.js';
import Record from '../models/record.js';
import * as analytics from '../services/analytics.js';
import PDFDocument from 'pdfkit';
import fs from 'fs';
import path from 'path';
import { Markup } from 'telegraf';

// –ó–∞–≥–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤ (—â–æ–¥–µ–Ω–Ω–∏–π, —Ç–∏–∂–Ω–µ–≤–∏–π, –º—ñ—Å—è—á–Ω–∏–π, –∑–∞–≥–∞–ª—å–Ω–∏–π)
async function sendReport(ctx, period = 'daily') {
  const telegramId = ctx.from.id;
  
  try {
    const user = await User.findOne({ telegramId });
    if (!user) {
      return ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start. üòä');
    }

    const { startDate, endDate } = getPeriodDates(period);
    const records = await Record.find({
      telegramId,
      timestamp: { $gte: startDate, $lt: endDate }
    }).sort({ timestamp: 1 });

    if (records.length === 0) {
      return ctx.reply(`–ó–∞ ${period === 'daily' ? '—Å—å–æ–≥–æ–¥–Ω—ñ' : period === 'weekly' ? '–æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤' : period === 'monthly' ? '–º—ñ—Å—è—Ü—å' : '–≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥'} —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤. üôÅ`);
    }

    const report = await analytics.generateReport(records, user, period);
    const formattedReport = formatReport(report, period);

    if (user.reportChannel === 'email') {
      // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É —á–µ—Ä–µ–∑ Email
      await sendEmailReport(user.email, formattedReport);
      await ctx.reply('–ó–≤—ñ—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –≤–∞—à email! üìß');
    } else {
      // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É —á–µ—Ä–µ–∑ Telegram
      await ctx.reply(formattedReport);
      await ctx.reply('–ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! üì¨');
    }
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è PDF
    await sendPdfReport(ctx, formattedReport, period);

  } catch (err) {
    console.error('Error generating report:', err);
    await ctx.reply('–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–≤—ñ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –ø—ñ–∑–Ω—ñ—à–µ. üòû');
  }
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É
function formatReport(report, period) {
  if (period === 'daily') {
    return `
üìä –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç

üìÖ –¢–≤—ñ–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ!
üî∏ –ù–∞–π—á–∞—Å—Ç—ñ—à–∏–π —Å—Ç–∞–Ω: ${report.mostFrequentState}
üî∏ –ß–∞—Å—Ç—ñ –µ–º–æ—Ü—ñ—ó: ${report.frequentEmotions.join(', ')}
üî∏ –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ —Ç—Ä–∏–≥–µ—Ä–∏: ${report.triggers.join(', ')}
üî∏ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: ${report.aiRecommendation}

    `;
  } else if (period === 'weekly' || period === 'monthly') {
    return `
üìà –ó–≤—ñ—Ç –∑–∞ ${period === 'weekly' ? '—Ç–∏–∂–¥–µ–Ω—å' : '–º—ñ—Å—è—Ü—å'}:

üîπ –†–µ—Å—É—Ä—Å–Ω—ñ —Å—Ç–∞–Ω–∏: ${report.resourcefulStates}%
üîπ –ï–º–æ—Ü—ñ—ó: ${report.emotions.join(', ')}
üîπ –ß–∞—Å—Ç—ñ —Ç—Ä–∏–≥–µ—Ä–∏: ${report.triggers.join(', ')}
üîπ –ö—Ä–∞—â–µ –ø—Ä–∞—Ü—é–≤–∞–ª–æ: ${report.bestWorks.join(', ')}
üî∏ –†–µ–∫–æ–º–µ–Ω–¥—É—é: ${report.dailyRituals}

    `;
  } else if (period === 'all') {
    return `
üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∑–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥:

üî∏ –ù–∞–π—á–∞—Å—Ç—ñ—à–∏–π —Å—Ç–∞–Ω: ${report.mostFrequentState}
üî∏ –ß–∞—Å—Ç—ñ –µ–º–æ—Ü—ñ—ó: ${report.frequentEmotions.join(', ')}
üî∏ –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ —Ç—Ä–∏–≥–µ—Ä–∏: ${report.triggers.join(', ')}
üî∏ –ö—Ä–∞—â–µ –ø—Ä–∞—Ü—é–≤–∞–ª–æ: ${report.bestWorks.join(', ')}
üî∏ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: ${report.aiRecommendation}

    `;
  }
  return '';
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç –¥–ª—è –∑–≤—ñ—Ç—ñ–≤
function getPeriodDates(period) {
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  if (period === 'daily') {
    return { startDate: today, endDate: new Date(today).setDate(today.getDate() + 1) };
  } else if (period === 'weekly') {
    const weekAgo = new Date(today);
    weekAgo.setDate(weekAgo.getDate() - 7);
    return { startDate: weekAgo, endDate: today };
  } else if (period === 'monthly') {
    const monthAgo = new Date(today);
    monthAgo.setMonth(monthAgo.getMonth() - 1);
    return { startDate: monthAgo, endDate: today };
  } else if (period === 'all') {
    return { startDate: 0, endDate: today }; // –í—Å—ñ –¥–∞–Ω—ñ –∑ –ø–æ—á–∞—Ç–∫—É —á–∞—Å—É
  } else {
    throw new Error('Invalid period specified.');
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF —Ñ–∞–π–ª—É
function generatePdfReport(reportContent, period) {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument();
    const filePath = path.join(__dirname, `report_${period}.pdf`);
    
    doc.pipe(fs.createWriteStream(filePath));

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    doc.fontSize(18).text(`–ó–≤—ñ—Ç –∑–∞ ${period === 'daily' ? '–î–µ–Ω—å' : period === 'weekly' ? '–¢–∏–∂–¥–µ–Ω—å' : '–ú—ñ—Å—è—Ü—å'}`, { align: 'center' });

    // –í–º—ñ—Å—Ç –∑–≤—ñ—Ç—É
    doc.fontSize(12).text(reportContent, {
      align: 'left',
      continued: true,
      indent: 20,
    });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    doc.end();

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
    doc.on('finish', () => resolve(filePath));
    doc.on('error', (err) => reject(err));
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É —á–µ—Ä–µ–∑ Telegram (–≤–∫–ª—é—á–∞—é—á–∏ PDF)
async function sendPdfReport(ctx, formattedReport, period) {
  try {
    const pdfFilePath = await generatePdfReport(formattedReport, period);
    
    await ctx.replyWithDocument({ source: pdfFilePath }, { caption: `–ó–≤—ñ—Ç –∑–∞ ${period === 'daily' ? '–î–µ–Ω—å' : period === 'weekly' ? '–¢–∏–∂–¥–µ–Ω—å' : '–ú—ñ—Å—è—Ü—å'}` });
    
    // –í–∏–¥–∞–ª–∏—Ç–∏ PDF –ø—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
    fs.unlinkSync(pdfFilePath);
  } catch (error) {
    console.error('Error sending PDF:', error);
    await ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ PDF –∑–≤—ñ—Ç. üòû');
  }
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑–≤—ñ—Ç—É
async function setupReportSettings(ctx) {
  const telegramId = ctx.from.id;

  try {
    const user = await User.findOne({ telegramId });
    if (!user) {
      return ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start. üòä');
    }

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('–©–æ–¥–Ω—è', 'daily')],
      [Markup.button.callback('–©–æ—Ç–∏–∂–Ω—è', 'weekly')],
      [Markup.button.callback('–©–æ–º—ñ—Å—è—Ü—è', 'monthly')],
      [Markup.button.callback('–û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ Telegram', 'telegram')],
      [Markup.button.callback('–û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–∞ Email', 'email')],
    ]);
    
    await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—ñ–≤ –∞–±–æ –∫–∞–Ω–∞–ª –∑–≤\'—è–∑–∫—É:', keyboard);
  } catch (err) {
    console.error('Error setting up report settings:', err);
    await ctx.reply('–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤. üòû');
  }
}

// –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
async function handleReportSettings(ctx) {
  const telegramId = ctx.from.id;
  const callbackData = ctx.callbackQuery.data;

  try {
    const user = await User.findOne({ telegramId });
    if (!user) {
      return ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start. üòä');
    }

    if (['daily', 'weekly', 'monthly'].includes(callbackData)) {
      // –í–∏–±—ñ—Ä –ø–µ—Ä—ñ–æ–¥—É
      user.reportPeriod = callbackData;
      await user.save();
      await ctx.reply(`–í–∏–±—Ä–∞–Ω–æ –ø–µ—Ä—ñ–æ–¥: ${callbackData === 'daily' ? '–©–æ–¥–Ω—è' : callbackData === 'weekly' ? '–©–æ—Ç–∏–∂–Ω—è' : '–©–æ–º—ñ—Å—è—Ü—è'}`);
    } else if (['telegram', 'email'].includes(callbackData)) {
      // –í–∏–±—ñ—Ä –∫–∞–Ω–∞–ª—É –∑–≤'—è–∑–∫—É
      user.reportChannel = callbackData;
      await user.save();
      await ctx.reply(`–í–∏–±—Ä–∞–Ω–æ –∫–∞–Ω–∞–ª –¥–ª—è –∑–≤—ñ—Ç—ñ–≤: ${callbackData === 'telegram' ? 'Telegram' : 'Email'}`);
    }
  } catch (err) {
    console.error('Error handling report settings:', err);
    await ctx.reply('–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å. üòû');
  }
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
async function sendDailyReport(ctx) {
  try {
    await sendReport(ctx, 'daily');
  } catch (error) {
    await ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç. üòî');
  }
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –∑–≤—ñ—Ç—É
async function sendWeeklyReport(ctx) {
  try {
    await sendReport(ctx, 'weekly');
  } catch (error) {
    await ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç. üòî');
  }
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –º—ñ—Å—è—á–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
async function sendMonthlyReport(ctx) {
  try {
    await sendReport(ctx, 'monthly');
  } catch (error) {
    await ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç. üòî');
  }
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –∑–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥
async function sendAllTimeReport(ctx) {
  try {
    await sendReport(ctx, 'all');
  } catch (error) {
    await ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç. üòî');
  }
}


export {
  sendReport,
  sendDailyReport,
  sendWeeklyReport,
  sendMonthlyReport,
  sendAllTimeReport,
  setupReportSettings,
  handleReportSettings,
  sendPdfReport,
};
