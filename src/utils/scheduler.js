import cron from 'node-cron';
import User from '../models/user.js';
import config from '../config/config.js';

// –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á
const scheduleTasks = {};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
async function initScheduler(bot) {
  try {
    const users = await User.find();
    await Promise.all(users.map(user => setupUserSchedule(bot, user)));
    console.log(`üóìÔ∏è Scheduled tasks for ${users.length} users`);
  } catch (err) {
    console.error('‚ùå Error initializing scheduler:', err);
  }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function updateUserSchedule(bot, userId) {
  try {
    const user = await User.findOne({ telegramId: userId });
    if (user) await setupUserSchedule(bot, user);
  } catch (err) {
    console.error(`‚ùå Error updating schedule for user ${userId}:`, err);
  }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function setupUserSchedule(bot, user) {
  const { telegramId, frequency } = user;
  
  // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞ –æ—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–∞–¥–∞—á—ñ
  if (scheduleTasks[telegramId]) {
    scheduleTasks[telegramId].forEach(task => task.stop());
  }
  scheduleTasks[telegramId] = [];

  console.log(`üîÅ Setting up schedule for ${telegramId} [${frequency}]`);

  // –í–∏–±—ñ—Ä —Ä–æ–∑–∫–ª–∞–¥—É
  const setupFunctions = {
    hourly: setupHourlySchedule,
    '2hours': setup2HoursSchedule,
    morning_evening: setupMorningEveningSchedule
  };

  const setupFn = setupFunctions[frequency];
  if (setupFn) {
    setupFn(bot, user);
  } else {
    console.warn(`‚ö†Ô∏è Unknown frequency: ${frequency}`);
  }
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–æ—Ç–æ—á–Ω–∞ –≥–æ–¥–∏–Ω–∞ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ
function isWithinTimeRange(hour, start, end) {
  return hour >= start && hour <= end;
}

// –ó–∞–≥–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ
function createCronTask(cronTime, conditionFn, taskFn) {
  return cron.schedule(cronTime, async () => {
    if (conditionFn()) {
      await taskFn();
    }
  });
}

// –©–æ–≥–æ–¥–∏–Ω–∏
function setupHourlySchedule(bot, user) {
  const task = createCronTask(
    '0 * * * *',
    () => isWithinTimeRange(new Date().getHours(), user.startTime, user.endTime),
    () => sendPollNotification(bot, user)
  );
  scheduleTasks[user.telegramId].push(task);
}

// –ö–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏
function setup2HoursSchedule(bot, user) {
  const hours = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22];
  hours.forEach(h => {
    const task = createCronTask(
      `0 ${h} * * *`,
      () => isWithinTimeRange(h, user.startTime, user.endTime),
      () => sendPollNotification(bot, user)
    );
    scheduleTasks[user.telegramId].push(task);
  });
}

// –ó—Ä–∞–Ω–∫—É —Ç–∞ –≤–≤–µ—á–µ—Ä—ñ
function setupMorningEveningSchedule(bot, user) {
  const times = [9, 19]; // —Ä–∞–Ω–∫–æ–≤–µ —ñ –≤–µ—á—ñ—Ä–Ω—î

  times.forEach(h => {
    if (isWithinTimeRange(h, user.startTime, user.endTime)) {
      const task = createCronTask(
        `0 ${h} * * *`,
        () => true,
        () => sendPollNotification(bot, user)
      );
      scheduleTasks[user.telegramId].push(task);
    }
  });
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
async function sendPollNotification(bot, user) {
  try {
    // –í–∏–±—ñ—Ä —Ç–µ–º–∏ –¥–ª—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (–∑–∞–º—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ config)
    const { pollSettings } = config.themes[user.theme] || config.themes.emotionTracking;  // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - emotionTracking

    console.log(`[${new Date().toISOString()}] üì© Sending poll to ${user.telegramId}`);
    await bot.telegram.sendMessage(
      user.telegramId,
      `–ü—Ä–∏–≤—ñ—Ç, ${user.name || '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É'}! üßò –ù–∞—Å—Ç–∞–≤ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–≤—ñ–π –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω.`,
      {
        reply_markup: {
          inline_keyboard: [
            ...pollSettings.states.map(state => 
              ({ text: state.text, callback_data: `state_${state.key}` })
            ),
            ...pollSettings.emotions.map(emotion => 
              ({ text: emotion.text, callback_data: `emotion_${emotion.key}` })
            ),
            ...pollSettings.feelings.map(feeling => 
              ({ text: feeling.text, callback_data: `feeling_${feeling.key}` })
            ),
            ...pollSettings.actions.map(action => 
              ({ text: action.text, callback_data: `action_${action.key}` })
            )
          ]
        }
      }
    );
  } catch (err) {
    console.error(`‚ùå Error sending poll to ${user.telegramId}:`, err);
  }
}

export {
  initScheduler,
  setupUserSchedule,
  updateUserSchedule
};
